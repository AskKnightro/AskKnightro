# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to ECS (frontend & backend)

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 423623855389.dkr.ecr.us-east-2.amazonaws.com
  CLUSTER: app-cluster

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: frontend
            dir: frontend
            ecr_repo: my-frontend
            task_def: frontend/frontend-ssr-revision3.json
            container: nextjs
            ecs_service: frontend-ssr-svc
          - name: backend
            dir: backend
            ecr_repo: my-backend
            task_def: backend/backend-api-revision10.json
            container: spring
            ecs_service: backend-api-svc

        steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image (multi-arch)
        working-directory: ${{ matrix.service.dir }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ matrix.service.ecr_repo }}:${IMAGE_TAG}
          docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE_URI" --push .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Render task definition with new image
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service.task_def }}
          container-name: ${{ matrix.service.container }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ matrix.service.ecs_service }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true
          wait-for-service-stability: true
