version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-askknightro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
    ports: ["5433:5432"]    # host:container
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    environment:
      # Postgres: inside Docker, use service DNS + container port
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-askknightro}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-root}
      

      # Spring AI OpenAI (chat only, set in your shell or .env, do NOT hardcode)
      SPRING_AI_OPENAI_API_KEY: ${SPRING_AI_OPENAI_API_KEY}
      SPRING_AI_OPENAI_CHAT_OPTIONS_MODEL: gpt-4o-mini
      SPRING_AI_OPENAI_EMBEDDING_ENABLED: "false"

      # Ollama Embeddings
      SPRING_AI_OLLAMA_BASE_URL: http://ollama:11434
      SPRING_AI_OLLAMA_EMBEDDING_MODEL: all-minilm
      SPRING_AI_OLLAMA_EMBEDDING_ENABLED: "true"
      SPRING_AI_OLLAMA_INIT_PULL_MODEL_STRATEGY: when_missing

      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_HOST: standalone
      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_PORT: 19530
      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_SECURE: "false"
      SPRING_AI_VECTORSTORE_MILVUS_DATABASENAME: default
      SPRING_AI_VECTORSTORE_MILVUS_EMBEDDINGDIMENSION: "384"
      SPRING_AI_VECTORSTORE_MILVUS_INDEXTYPE: IVF_FLAT
      SPRING_AI_VECTORSTORE_MILVUS_METRICTYPE: COSINE
      SPRING_AI_VECTORSTORE_MILVUS_INITIALIZE_SCHEMA: "true"
      SPRING_AI_VECTORSTORE_MILVUS_AUTO_ID: "false"

      AWS_REGION: ${AWS_REGION:-us-east-2}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID}
      COGNITO_APP_CLIENT_ID: ${COGNITO_APP_CLIENT_ID}
      COGNITO_APP_CLIENT_SECRET: ${COGNITO_APP_CLIENT_SECRET}
      JWT_COGNITO: ${JWT_COGNITO}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      standalone:
        condition: service_healthy
      ollama:
        condition: service_started
    ports: ["8080:8080"]

  frontend:
    build:
      context: ./frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
    depends_on:
      - backend
    ports: ["3000:3000"]

#  milvus-migrate:
#    build:
#      context: ./backend/src/main/resources/db/milvus_migrations
#      dockerfile: Dockerfile.milvus_migrate
#    depends_on:
#      - standalone
#    entrypoint: ["python", "migrate.py"]
#    restart: "no"

  attu:
    image: zilliz/attu:latest
    ports:
      - "8000:3000"
    depends_on:
      - standalone   # your Milvus service name
    # If you want, you can preconfigure the URL:
    environment:
      - MILVUS_URL=http://standalone:19530

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    environment:
      - OLLAMA_NUM_THREADS=8        # threads per request
      - OLLAMA_NUM_PARALLEL=2       # concurrent requests
      - OLLAMA_KEEP_ALIVE=24h       # keep models “hot”
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
  etcd:
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    image: milvusdb/milvus:v2.6.0
    command: [ "milvus", "run", "standalone" ]
    security_opt: [ "seccomp:unconfined" ]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MQ_TYPE: woodpecker
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus-data:/var/lib/milvus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"   # remove if you don't need host access
      - "9091:9091"
    depends_on:
      - etcd
      - minio


volumes:
  etcd-data:
  minio-data:
  milvus-data:
  pgdata:
  ollama: