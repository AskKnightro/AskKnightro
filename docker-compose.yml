version: "3.9"

services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.15
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "2147483648"
      ETCD_HEARTBEAT_INTERVAL: "500"
      ETCD_ELECTION_TIMEOUT: "2500"
    command: ["etcd","-advertise-client-urls","http://etcd:2379","-listen-client-urls","http://0.0.0.0:2379","-data-dir","/etcd"]
    volumes:
      - etcd-data:/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2024-09-01T00-00-00Z.fips
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: ["server","/minio_data","--console-address",":9001"]
    ports: ["9000:9000","9001:9001"]
    volumes:
      - minio-data:/minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    image: milvusdb/milvus:v2.4.8
    container_name: askknightro-milvus-standalone
    command: ["milvus","run","standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MQ_TYPE: rocksmq           # keep streaming OFF for local dev
    depends_on:
      etcd:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "19530:19530"   # host access if you run clients on your Mac
      - "9091:9091"
    volumes:
      - milvus-data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-askknightro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
    ports: ["5433:5432"]    # host:container
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    environment:
      # Postgres: inside Docker, use service DNS + container port
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-askknightro}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-root}

      # Spring AI OpenAI (set in your shell or .env, do NOT hardcode)
      SPRING_AI_OPENAI_API_KEY: ${SPRING_AI_OPENAI_API_KEY}

      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_HOST: standalone
      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_PORT: 19530
      SPRING_AI_VECTORSTORE_MILVUS_CLIENT_SECURE: "false"
      SPRING_AI_VECTORSTORE_MILVUS_DATABASENAME: default
      SPRING_AI_VECTORSTORE_MILVUS_COLLECTION_NAME: vector_store4
      SPRING_AI_VECTORSTORE_MILVUS_EMBEDDINGDIMENSION: "1536"
      SPRING_AI_VECTORSTORE_MILVUS_INDEXTYPE: IVF_FLAT
      SPRING_AI_VECTORSTORE_MILVUS_METRICTYPE: COSINE

    depends_on:
      postgres:
        condition: service_healthy
      standalone:
        condition: service_healthy
    ports: ["8080:8080"]

  frontend:
    build:
      context: ./frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
    depends_on:
      - backend
    ports: ["3000:3000"]

  milvus-migrate:
    build:
      context: ./backend/src/main/resources/db/milvus_migrations
      dockerfile: Dockerfile.milvus_migrate
    depends_on:
      - standalone
    entrypoint: ["python", "migrate.py"]
    restart: "no"



volumes:
  etcd-data:
  minio-data:
  milvus-data:
  pgdata: